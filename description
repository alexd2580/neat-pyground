we start off with just one mutation

function newGeneration()
  # Remove bottom ceil 50% of each species
  # If species broke their record - reset their counter, else increase staleness counter
  # if staleness counter > StaleSpecies and not top-ranking species - drop species
    StaleSpecies = 15
  # Assign global ranking to each individual
  # Calculate average fitness of each species.
  # Sum average fitness of all species
  # get average-percentage of each species
  # multiplied by the total population -> gives amount to breed
    Population = 300
  # if at least one to breed -> species survives, all other are dropped.

  # Recompute total score average.
  # for each species
  # create `math.floor(species.averageFitness / sum * Population) - 1` intrabreed children

  # Drop members of each species except the top ones.
  # Randomly breed some species until we have `population` children.
  # Add the children to their corresponding global species.
end

how to breed
  # if crossoverChance then breed two random genomes.
    CrossoverChance = 0.75
  # else select a random one
  # mutate it
  # Add it to its corresponding species


is same species
  # delta disjoint * factor + deltaweights * factor < treshold
    DeltaDisjoint = 2.0
    DeltaWeights = 0.4
    DeltaThreshold = 1.0
  # weights = sum abs(diff) / numMatching
  # disjoint = percentage of missing

how to mutate
  # randomly increase or decrease the chance of all mutations respectively by 5%
  # Max one "connection" mutation
  # link, bias, node, enable and disable all
  # Check whether the mutation rate is greater than random
  # if yes, mutate
  # decrease the rate locally by 1 (100%) and retry

DisableMutationChance = 0.4
EnableMutationChance = 0.2
enableDisable
  # select one random enabled (disabled) gene and flip the enabled flag

NodeMutationChance = 0.50
splitLink
  # select a random gene
  # if not active return
  # deactivate and split

LinkMutationChance = 2.0
BiasMutationChance = 0.40 # WTF?
linkCreate
  # select random two nodes (if exists skip)
  # create random link -2/2.

MutateConnectionsChance = 0.25
linkMutate
    PerturbChance = 0.90
    StepSize = 0.1
  # For each node
  # with a chance of `perturbChance` add random in range [-step, +step] to weight
  # otherwise assign a random value to connection [-2, 2]
